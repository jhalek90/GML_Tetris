<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

w=10
h=16
size=32
game_speed=size/8
/*
room_width=size*(w+4)
room_height=size*(h+4)
view_wview=room_width
view_hview=room_height
window_set_size(room_width,room_height)
display_set_gui_size(room_width,room_height)
*/
x=size
y=size


randomize()
hold=0


xx=0
yy=0

main_grid=ds_grid_create(w,h)

current_grid=ds_grid_create(4,4)

current_xx=0
current_yy=0
offset_yy=-16
mode=0
place_timer=0
move_timer=0
mode_timer=0

block_grid_i_block=ds_grid_create(4,4)
block_grid_o_block=ds_grid_create(4,4)

block_grid_l_block=ds_grid_create(3,3)
block_grid_j_block=ds_grid_create(3,3)

block_grid_s_block=ds_grid_create(3,3)
block_grid_t_block=ds_grid_create(3,3)
block_grid_z_block=ds_grid_create(3,3)

ds_grid_set(block_grid_l_block,2,0,1)
ds_grid_set(block_grid_l_block,0,1,1)
ds_grid_set(block_grid_l_block,1,1,1)
ds_grid_set(block_grid_l_block,2,1,1)

ds_grid_set(block_grid_j_block,0,0,2)
ds_grid_set(block_grid_j_block,0,1,2)
ds_grid_set(block_grid_j_block,1,1,2)
ds_grid_set(block_grid_j_block,2,1,2)

ds_grid_set(block_grid_i_block,0,1,3)
ds_grid_set(block_grid_i_block,1,1,3)
ds_grid_set(block_grid_i_block,2,1,3)
ds_grid_set(block_grid_i_block,3,1,3)

ds_grid_set(block_grid_o_block,1,1,4)
ds_grid_set(block_grid_o_block,2,1,4)
ds_grid_set(block_grid_o_block,1,2,4)
ds_grid_set(block_grid_o_block,2,2,4)

ds_grid_set(block_grid_s_block,1,0,5)
ds_grid_set(block_grid_s_block,2,0,5)
ds_grid_set(block_grid_s_block,0,1,5)
ds_grid_set(block_grid_s_block,1,1,5)

ds_grid_set(block_grid_t_block,1,0,6)
ds_grid_set(block_grid_t_block,0,1,6)
ds_grid_set(block_grid_t_block,1,1,6)
ds_grid_set(block_grid_t_block,2,1,6)

ds_grid_set(block_grid_z_block,0,0,7)
ds_grid_set(block_grid_z_block,1,0,7)
ds_grid_set(block_grid_z_block,1,1,7)
ds_grid_set(block_grid_z_block,2,1,7)

spawn_new_block()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
move_timer-=1

if mode=0
    {
    
    if check_collide(current_grid,current_xx,current_yy)=false
    {
    if keyboard_check_pressed(ord("Z"))
        {
        scr_grid_rotate(current_grid,0)
        if check_collide(current_grid,current_xx,current_yy)=false
            {
            place_timer=0
            }
        else
            {
            if scr_move_out_of_collide()=false{scr_grid_rotate(current_grid,1)}
            }
        
        }
        
    if keyboard_check_pressed(ord("X"))
        {
        scr_grid_rotate(current_grid,1) 
        if check_collide(current_grid,current_xx,current_yy)=false
            {
            place_timer=0
            }
        else
            {
            if scr_move_out_of_collide()=false{scr_grid_rotate(current_grid,0)}
            }
        }
    }
    
    if keyboard_check_pressed(vk_left){move_timer=-1}
    if keyboard_check_pressed(vk_right){move_timer=-1}
    if move_timer&lt;0
        {
        if keyboard_check(vk_left){if check_collide(current_grid,current_xx-1,current_yy)=false{current_xx-=1 place_timer=0 move_timer=5}}
        if keyboard_check(vk_right){if check_collide(current_grid,current_xx+1,current_yy)=false{current_xx+=1 place_timer=0 move_timer=5}}
        }
    if check_collide(current_grid,current_xx,current_yy+1)
            {
            place_timer+=1
            offset_yy=0
            }
        else
            {
            place_timer=0
            offset_yy+=game_speed
            if keyboard_check(vk_down){offset_yy=size}
            if offset_yy&gt;=size
                {
                current_yy+=1
                offset_yy=0
                }
            }
            
    if check_collide(current_grid,current_xx,current_yy)
        {
        scr_move_out_of_collide()
        }
            
    if place_timer&gt;15
        {
        mode=1
        transfer_to_main_grid(current_grid,current_xx,current_yy)
        scr_check_lines()
        current_yy=0//-11111
        mode_timer=0
        }
        

    }
    
if mode=1 // no lines cleared, just wait a little
    {
    mode_timer+=1 
    if mode_timer&gt;10
        {
        spawn_new_block()
        mode=0
        }

    }
    
if mode=2 // lines are cleared
    {
    mode_timer+=1 
    if mode_timer&gt;10
        {
        scr_clear_lines()
        mode=0
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
for(yy=0; yy&lt;h; yy++)
    {
    for(xx=0; xx&lt;w; xx++)
        {
        hold=ds_grid_get(main_grid,xx,yy)
        if hold=0{draw_set_color(c_dkgray)}
        if hold=1{draw_set_color(c_red)}
        if hold=2{draw_set_color(c_lime)}
        if hold=3{draw_set_color(c_aqua)}
        if hold=4{draw_set_color(c_orange)}
        if hold=5{draw_set_color(c_yellow)}
        if hold=6{draw_set_color(c_fuchsia)}
        if hold=7{draw_set_color(c_blue)}
        if hold=8{draw_set_color(c_purple)}
        if hold=9{draw_set_color(c_white)}
        if hold=10{draw_set_color(c_white)}
        //draw_sprite(spr_block,ds_grid_get(main_grid,xx,yy),x+(xx*size),y+(yy*size))
        draw_rectangle(x+(xx*size),y+(yy*size),x+(xx*size)+size,y+(yy*size)+size,false)
        }
    }
    

    
if mode=0
{

for(yy=0; yy&lt;ds_grid_width(current_grid); yy++)
    {
    for(xx=0; xx&lt;ds_grid_width(current_grid); xx++)
        {
        if ds_grid_get(current_grid,xx,yy)&gt;0
            {
            //draw_sprite(spr_block,ds_grid_get(current_grid,xx,yy),x+(xx*size)+(current_xx*size),y+(yy*size)+(current_yy*size)+(offset_yy))
            
            
            hold=ds_grid_get(current_grid,xx,yy)
            if hold=0{draw_set_color(c_dkgray)}
            if hold=1{draw_set_color(c_red)}
            if hold=2{draw_set_color(c_lime)}
            if hold=3{draw_set_color(c_aqua)}
            if hold=4{draw_set_color(c_orange)}
            if hold=5{draw_set_color(c_yellow)}
            if hold=6{draw_set_color(c_fuchsia)}
            if hold=7{draw_set_color(c_blue)}
            if hold=8{draw_set_color(c_purple)}
            if hold=9{draw_set_color(c_white)}
            if hold=10{draw_set_color(c_white)}
            draw_rectangle(x+(xx*size)+(current_xx*size),y+(yy*size)+(current_yy*size)+(offset_yy),x+(xx*size)+(current_xx*size)+size,y+(yy*size)+(current_yy*size)+(offset_yy)+size,false)
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
